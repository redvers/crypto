{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages crypto","title":"crypto"},{"location":"crypto--index/","text":"The crypto package includes a variety of common cryptographic algorithms and functions often useful in cryptographic code for their use in information security. Public Types \u00b6 interface HashFn primitive MD4 primitive MD5 primitive RIPEMD160 primitive SHA1 primitive SHA224 primitive SHA256 primitive SHA384 primitive SHA512 primitive ToHexString class Digest primitive ConstantTimeCompare","title":"Package"},{"location":"crypto--index/#public-types","text":"interface HashFn primitive MD4 primitive MD5 primitive RIPEMD160 primitive SHA1 primitive SHA224 primitive SHA256 primitive SHA384 primitive SHA512 primitive ToHexString class Digest primitive ConstantTimeCompare","title":"Public Types"},{"location":"crypto-ConstantTimeCompare/","text":"ConstantTimeCompare \u00b6 [Source] primitive val ConstantTimeCompare Constructors \u00b6 create \u00b6 [Source] new val create() : ConstantTimeCompare val^ Returns \u00b6 ConstantTimeCompare val^ Public Functions \u00b6 apply[optional S: ( String box | Array [ U8 val] box)] \u00b6 [Source] Return true if the two ByteSeqs, xs and ys, have equal contents. The time taken is independent of the contents. fun box apply[optional S: (String box | Array[U8 val] box)]( xs: S, ys: S) : Bool val Parameters \u00b6 xs: S ys: S Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: ConstantTimeCompare val) : Bool val Parameters \u00b6 that: ConstantTimeCompare val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ConstantTimeCompare val) : Bool val Parameters \u00b6 that: ConstantTimeCompare val Returns \u00b6 Bool val","title":"primitive ConstantTimeCompare"},{"location":"crypto-ConstantTimeCompare/#constanttimecompare","text":"[Source] primitive val ConstantTimeCompare","title":"ConstantTimeCompare"},{"location":"crypto-ConstantTimeCompare/#constructors","text":"","title":"Constructors"},{"location":"crypto-ConstantTimeCompare/#create","text":"[Source] new val create() : ConstantTimeCompare val^","title":"create"},{"location":"crypto-ConstantTimeCompare/#returns","text":"ConstantTimeCompare val^","title":"Returns"},{"location":"crypto-ConstantTimeCompare/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-ConstantTimeCompare/#applyoptional-s-string-box-arrayu8-val-box","text":"[Source] Return true if the two ByteSeqs, xs and ys, have equal contents. The time taken is independent of the contents. fun box apply[optional S: (String box | Array[U8 val] box)]( xs: S, ys: S) : Bool val","title":"apply[optional S: (String box | Array[U8 val] box)]"},{"location":"crypto-ConstantTimeCompare/#parameters","text":"xs: S ys: S","title":"Parameters"},{"location":"crypto-ConstantTimeCompare/#returns_1","text":"Bool val","title":"Returns"},{"location":"crypto-ConstantTimeCompare/#eq","text":"[Source] fun box eq( that: ConstantTimeCompare val) : Bool val","title":"eq"},{"location":"crypto-ConstantTimeCompare/#parameters_1","text":"that: ConstantTimeCompare val","title":"Parameters"},{"location":"crypto-ConstantTimeCompare/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-ConstantTimeCompare/#ne","text":"[Source] fun box ne( that: ConstantTimeCompare val) : Bool val","title":"ne"},{"location":"crypto-ConstantTimeCompare/#parameters_2","text":"that: ConstantTimeCompare val","title":"Parameters"},{"location":"crypto-ConstantTimeCompare/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-Digest/","text":"Digest \u00b6 [Source] Produces a hash from the chunks of input. Feed the input with append() and produce a final hash from the concatenation of the input with final(). class ref Digest Constructors \u00b6 md4 \u00b6 [Source] Use the MD4 algorithm to calculate the hash. new ref md4() : Digest ref^ Returns \u00b6 Digest ref^ md5 \u00b6 [Source] Use the MD5 algorithm to calculate the hash. new ref md5() : Digest ref^ Returns \u00b6 Digest ref^ ripemd160 \u00b6 [Source] Use the RIPEMD160 algorithm to calculate the hash. new ref ripemd160() : Digest ref^ Returns \u00b6 Digest ref^ sha1 \u00b6 [Source] Use the SHA1 algorithm to calculate the hash. new ref sha1() : Digest ref^ Returns \u00b6 Digest ref^ sha224 \u00b6 [Source] Use the SHA256 algorithm to calculate the hash. new ref sha224() : Digest ref^ Returns \u00b6 Digest ref^ sha256 \u00b6 [Source] Use the SHA256 algorithm to calculate the hash. new ref sha256() : Digest ref^ Returns \u00b6 Digest ref^ sha384 \u00b6 [Source] Use the SHA384 algorithm to calculate the hash. new ref sha384() : Digest ref^ Returns \u00b6 Digest ref^ sha512 \u00b6 [Source] Use the SHA512 algorithm to calculate the hash. new ref sha512() : Digest ref^ Returns \u00b6 Digest ref^ shake128 \u00b6 [Source] Use the Shake128 algorithm to calculate the hash. new ref shake128() : Digest ref^ Returns \u00b6 Digest ref^ shake256 \u00b6 [Source] Use the Shake256 algorithm to calculate the hash. new ref shake256() : Digest ref^ Returns \u00b6 Digest ref^ Public Functions \u00b6 append \u00b6 [Source] Update the Digest object with input. Throw an error if final() has been called. fun ref append( input: (String val | Array[U8 val] val)) : None val ? Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 None val ? final \u00b6 [Source] Return the digest of the strings passed to the append() method. fun ref final() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val digest_size \u00b6 [Source] Return the size of the message digest in bytes. fun box digest_size() : USize val Returns \u00b6 USize val","title":"class Digest"},{"location":"crypto-Digest/#digest","text":"[Source] Produces a hash from the chunks of input. Feed the input with append() and produce a final hash from the concatenation of the input with final(). class ref Digest","title":"Digest"},{"location":"crypto-Digest/#constructors","text":"","title":"Constructors"},{"location":"crypto-Digest/#md4","text":"[Source] Use the MD4 algorithm to calculate the hash. new ref md4() : Digest ref^","title":"md4"},{"location":"crypto-Digest/#returns","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#md5","text":"[Source] Use the MD5 algorithm to calculate the hash. new ref md5() : Digest ref^","title":"md5"},{"location":"crypto-Digest/#returns_1","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#ripemd160","text":"[Source] Use the RIPEMD160 algorithm to calculate the hash. new ref ripemd160() : Digest ref^","title":"ripemd160"},{"location":"crypto-Digest/#returns_2","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#sha1","text":"[Source] Use the SHA1 algorithm to calculate the hash. new ref sha1() : Digest ref^","title":"sha1"},{"location":"crypto-Digest/#returns_3","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#sha224","text":"[Source] Use the SHA256 algorithm to calculate the hash. new ref sha224() : Digest ref^","title":"sha224"},{"location":"crypto-Digest/#returns_4","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#sha256","text":"[Source] Use the SHA256 algorithm to calculate the hash. new ref sha256() : Digest ref^","title":"sha256"},{"location":"crypto-Digest/#returns_5","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#sha384","text":"[Source] Use the SHA384 algorithm to calculate the hash. new ref sha384() : Digest ref^","title":"sha384"},{"location":"crypto-Digest/#returns_6","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#sha512","text":"[Source] Use the SHA512 algorithm to calculate the hash. new ref sha512() : Digest ref^","title":"sha512"},{"location":"crypto-Digest/#returns_7","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#shake128","text":"[Source] Use the Shake128 algorithm to calculate the hash. new ref shake128() : Digest ref^","title":"shake128"},{"location":"crypto-Digest/#returns_8","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#shake256","text":"[Source] Use the Shake256 algorithm to calculate the hash. new ref shake256() : Digest ref^","title":"shake256"},{"location":"crypto-Digest/#returns_9","text":"Digest ref^","title":"Returns"},{"location":"crypto-Digest/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-Digest/#append","text":"[Source] Update the Digest object with input. Throw an error if final() has been called. fun ref append( input: (String val | Array[U8 val] val)) : None val ?","title":"append"},{"location":"crypto-Digest/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-Digest/#returns_10","text":"None val ?","title":"Returns"},{"location":"crypto-Digest/#final","text":"[Source] Return the digest of the strings passed to the append() method. fun ref final() : Array[U8 val] val","title":"final"},{"location":"crypto-Digest/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-Digest/#digest_size","text":"[Source] Return the size of the message digest in bytes. fun box digest_size() : USize val","title":"digest_size"},{"location":"crypto-Digest/#returns_12","text":"USize val","title":"Returns"},{"location":"crypto-HashFn/","text":"HashFn \u00b6 [Source] Produces a fixed-length byte array based on the input sequence. interface ref HashFn Public Functions \u00b6 apply \u00b6 [Source] fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val","title":"interface HashFn"},{"location":"crypto-HashFn/#hashfn","text":"[Source] Produces a fixed-length byte array based on the input sequence. interface ref HashFn","title":"HashFn"},{"location":"crypto-HashFn/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-HashFn/#apply","text":"[Source] fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-HashFn/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-HashFn/#returns","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-MD4/","text":"MD4 \u00b6 [Source] primitive val MD4 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : MD4 val^ Returns \u00b6 MD4 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the MD4 message digest conforming to RFC 1320 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: MD4 val) : Bool val Parameters \u00b6 that: MD4 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MD4 val) : Bool val Parameters \u00b6 that: MD4 val Returns \u00b6 Bool val","title":"primitive MD4"},{"location":"crypto-MD4/#md4","text":"[Source] primitive val MD4 is HashFn ref","title":"MD4"},{"location":"crypto-MD4/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-MD4/#constructors","text":"","title":"Constructors"},{"location":"crypto-MD4/#create","text":"[Source] new val create() : MD4 val^","title":"create"},{"location":"crypto-MD4/#returns","text":"MD4 val^","title":"Returns"},{"location":"crypto-MD4/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-MD4/#apply","text":"[Source] Compute the MD4 message digest conforming to RFC 1320 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-MD4/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-MD4/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-MD4/#eq","text":"[Source] fun box eq( that: MD4 val) : Bool val","title":"eq"},{"location":"crypto-MD4/#parameters_1","text":"that: MD4 val","title":"Parameters"},{"location":"crypto-MD4/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-MD4/#ne","text":"[Source] fun box ne( that: MD4 val) : Bool val","title":"ne"},{"location":"crypto-MD4/#parameters_2","text":"that: MD4 val","title":"Parameters"},{"location":"crypto-MD4/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-MD5/","text":"MD5 \u00b6 [Source] primitive val MD5 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : MD5 val^ Returns \u00b6 MD5 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the MD5 message digest conforming to RFC 1321 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: MD5 val) : Bool val Parameters \u00b6 that: MD5 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MD5 val) : Bool val Parameters \u00b6 that: MD5 val Returns \u00b6 Bool val","title":"primitive MD5"},{"location":"crypto-MD5/#md5","text":"[Source] primitive val MD5 is HashFn ref","title":"MD5"},{"location":"crypto-MD5/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-MD5/#constructors","text":"","title":"Constructors"},{"location":"crypto-MD5/#create","text":"[Source] new val create() : MD5 val^","title":"create"},{"location":"crypto-MD5/#returns","text":"MD5 val^","title":"Returns"},{"location":"crypto-MD5/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-MD5/#apply","text":"[Source] Compute the MD5 message digest conforming to RFC 1321 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-MD5/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-MD5/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-MD5/#eq","text":"[Source] fun box eq( that: MD5 val) : Bool val","title":"eq"},{"location":"crypto-MD5/#parameters_1","text":"that: MD5 val","title":"Parameters"},{"location":"crypto-MD5/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-MD5/#ne","text":"[Source] fun box ne( that: MD5 val) : Bool val","title":"ne"},{"location":"crypto-MD5/#parameters_2","text":"that: MD5 val","title":"Parameters"},{"location":"crypto-MD5/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-RIPEMD160/","text":"RIPEMD160 \u00b6 [Source] primitive val RIPEMD160 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : RIPEMD160 val^ Returns \u00b6 RIPEMD160 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the RIPEMD160 message digest conforming to ISO/IEC 10118-3 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: RIPEMD160 val) : Bool val Parameters \u00b6 that: RIPEMD160 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: RIPEMD160 val) : Bool val Parameters \u00b6 that: RIPEMD160 val Returns \u00b6 Bool val","title":"primitive RIPEMD160"},{"location":"crypto-RIPEMD160/#ripemd160","text":"[Source] primitive val RIPEMD160 is HashFn ref","title":"RIPEMD160"},{"location":"crypto-RIPEMD160/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-RIPEMD160/#constructors","text":"","title":"Constructors"},{"location":"crypto-RIPEMD160/#create","text":"[Source] new val create() : RIPEMD160 val^","title":"create"},{"location":"crypto-RIPEMD160/#returns","text":"RIPEMD160 val^","title":"Returns"},{"location":"crypto-RIPEMD160/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-RIPEMD160/#apply","text":"[Source] Compute the RIPEMD160 message digest conforming to ISO/IEC 10118-3 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-RIPEMD160/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-RIPEMD160/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-RIPEMD160/#eq","text":"[Source] fun box eq( that: RIPEMD160 val) : Bool val","title":"eq"},{"location":"crypto-RIPEMD160/#parameters_1","text":"that: RIPEMD160 val","title":"Parameters"},{"location":"crypto-RIPEMD160/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-RIPEMD160/#ne","text":"[Source] fun box ne( that: RIPEMD160 val) : Bool val","title":"ne"},{"location":"crypto-RIPEMD160/#parameters_2","text":"that: RIPEMD160 val","title":"Parameters"},{"location":"crypto-RIPEMD160/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-SHA1/","text":"SHA1 \u00b6 [Source] primitive val SHA1 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : SHA1 val^ Returns \u00b6 SHA1 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the SHA1 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: SHA1 val) : Bool val Parameters \u00b6 that: SHA1 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SHA1 val) : Bool val Parameters \u00b6 that: SHA1 val Returns \u00b6 Bool val","title":"primitive SHA1"},{"location":"crypto-SHA1/#sha1","text":"[Source] primitive val SHA1 is HashFn ref","title":"SHA1"},{"location":"crypto-SHA1/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-SHA1/#constructors","text":"","title":"Constructors"},{"location":"crypto-SHA1/#create","text":"[Source] new val create() : SHA1 val^","title":"create"},{"location":"crypto-SHA1/#returns","text":"SHA1 val^","title":"Returns"},{"location":"crypto-SHA1/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-SHA1/#apply","text":"[Source] Compute the SHA1 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-SHA1/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-SHA1/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-SHA1/#eq","text":"[Source] fun box eq( that: SHA1 val) : Bool val","title":"eq"},{"location":"crypto-SHA1/#parameters_1","text":"that: SHA1 val","title":"Parameters"},{"location":"crypto-SHA1/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-SHA1/#ne","text":"[Source] fun box ne( that: SHA1 val) : Bool val","title":"ne"},{"location":"crypto-SHA1/#parameters_2","text":"that: SHA1 val","title":"Parameters"},{"location":"crypto-SHA1/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-SHA224/","text":"SHA224 \u00b6 [Source] primitive val SHA224 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : SHA224 val^ Returns \u00b6 SHA224 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the SHA224 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: SHA224 val) : Bool val Parameters \u00b6 that: SHA224 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SHA224 val) : Bool val Parameters \u00b6 that: SHA224 val Returns \u00b6 Bool val","title":"primitive SHA224"},{"location":"crypto-SHA224/#sha224","text":"[Source] primitive val SHA224 is HashFn ref","title":"SHA224"},{"location":"crypto-SHA224/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-SHA224/#constructors","text":"","title":"Constructors"},{"location":"crypto-SHA224/#create","text":"[Source] new val create() : SHA224 val^","title":"create"},{"location":"crypto-SHA224/#returns","text":"SHA224 val^","title":"Returns"},{"location":"crypto-SHA224/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-SHA224/#apply","text":"[Source] Compute the SHA224 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-SHA224/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-SHA224/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-SHA224/#eq","text":"[Source] fun box eq( that: SHA224 val) : Bool val","title":"eq"},{"location":"crypto-SHA224/#parameters_1","text":"that: SHA224 val","title":"Parameters"},{"location":"crypto-SHA224/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-SHA224/#ne","text":"[Source] fun box ne( that: SHA224 val) : Bool val","title":"ne"},{"location":"crypto-SHA224/#parameters_2","text":"that: SHA224 val","title":"Parameters"},{"location":"crypto-SHA224/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-SHA256/","text":"SHA256 \u00b6 [Source] primitive val SHA256 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : SHA256 val^ Returns \u00b6 SHA256 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the SHA256 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: SHA256 val) : Bool val Parameters \u00b6 that: SHA256 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SHA256 val) : Bool val Parameters \u00b6 that: SHA256 val Returns \u00b6 Bool val","title":"primitive SHA256"},{"location":"crypto-SHA256/#sha256","text":"[Source] primitive val SHA256 is HashFn ref","title":"SHA256"},{"location":"crypto-SHA256/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-SHA256/#constructors","text":"","title":"Constructors"},{"location":"crypto-SHA256/#create","text":"[Source] new val create() : SHA256 val^","title":"create"},{"location":"crypto-SHA256/#returns","text":"SHA256 val^","title":"Returns"},{"location":"crypto-SHA256/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-SHA256/#apply","text":"[Source] Compute the SHA256 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-SHA256/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-SHA256/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-SHA256/#eq","text":"[Source] fun box eq( that: SHA256 val) : Bool val","title":"eq"},{"location":"crypto-SHA256/#parameters_1","text":"that: SHA256 val","title":"Parameters"},{"location":"crypto-SHA256/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-SHA256/#ne","text":"[Source] fun box ne( that: SHA256 val) : Bool val","title":"ne"},{"location":"crypto-SHA256/#parameters_2","text":"that: SHA256 val","title":"Parameters"},{"location":"crypto-SHA256/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-SHA384/","text":"SHA384 \u00b6 [Source] primitive val SHA384 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : SHA384 val^ Returns \u00b6 SHA384 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the SHA384 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: SHA384 val) : Bool val Parameters \u00b6 that: SHA384 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SHA384 val) : Bool val Parameters \u00b6 that: SHA384 val Returns \u00b6 Bool val","title":"primitive SHA384"},{"location":"crypto-SHA384/#sha384","text":"[Source] primitive val SHA384 is HashFn ref","title":"SHA384"},{"location":"crypto-SHA384/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-SHA384/#constructors","text":"","title":"Constructors"},{"location":"crypto-SHA384/#create","text":"[Source] new val create() : SHA384 val^","title":"create"},{"location":"crypto-SHA384/#returns","text":"SHA384 val^","title":"Returns"},{"location":"crypto-SHA384/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-SHA384/#apply","text":"[Source] Compute the SHA384 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-SHA384/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-SHA384/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-SHA384/#eq","text":"[Source] fun box eq( that: SHA384 val) : Bool val","title":"eq"},{"location":"crypto-SHA384/#parameters_1","text":"that: SHA384 val","title":"Parameters"},{"location":"crypto-SHA384/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-SHA384/#ne","text":"[Source] fun box ne( that: SHA384 val) : Bool val","title":"ne"},{"location":"crypto-SHA384/#parameters_2","text":"that: SHA384 val","title":"Parameters"},{"location":"crypto-SHA384/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-SHA512/","text":"SHA512 \u00b6 [Source] primitive val SHA512 is HashFn ref Implements \u00b6 HashFn ref Constructors \u00b6 create \u00b6 [Source] new val create() : SHA512 val^ Returns \u00b6 SHA512 val^ Public Functions \u00b6 apply \u00b6 [Source] Compute the SHA512 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val Parameters \u00b6 input: ( String val | Array [ U8 val] val) Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: SHA512 val) : Bool val Parameters \u00b6 that: SHA512 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SHA512 val) : Bool val Parameters \u00b6 that: SHA512 val Returns \u00b6 Bool val","title":"primitive SHA512"},{"location":"crypto-SHA512/#sha512","text":"[Source] primitive val SHA512 is HashFn ref","title":"SHA512"},{"location":"crypto-SHA512/#implements","text":"HashFn ref","title":"Implements"},{"location":"crypto-SHA512/#constructors","text":"","title":"Constructors"},{"location":"crypto-SHA512/#create","text":"[Source] new val create() : SHA512 val^","title":"create"},{"location":"crypto-SHA512/#returns","text":"SHA512 val^","title":"Returns"},{"location":"crypto-SHA512/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-SHA512/#apply","text":"[Source] Compute the SHA512 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 fun tag apply( input: (String val | Array[U8 val] val)) : Array[U8 val] val","title":"apply"},{"location":"crypto-SHA512/#parameters","text":"input: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"crypto-SHA512/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"crypto-SHA512/#eq","text":"[Source] fun box eq( that: SHA512 val) : Bool val","title":"eq"},{"location":"crypto-SHA512/#parameters_1","text":"that: SHA512 val","title":"Parameters"},{"location":"crypto-SHA512/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-SHA512/#ne","text":"[Source] fun box ne( that: SHA512 val) : Bool val","title":"ne"},{"location":"crypto-SHA512/#parameters_2","text":"that: SHA512 val","title":"Parameters"},{"location":"crypto-SHA512/#returns_3","text":"Bool val","title":"Returns"},{"location":"crypto-ToHexString/","text":"ToHexString \u00b6 [Source] primitive val ToHexString Constructors \u00b6 create \u00b6 [Source] new val create() : ToHexString val^ Returns \u00b6 ToHexString val^ Public Functions \u00b6 apply \u00b6 [Source] Return the lower-case hexadecimal string representation of the given Array of U8. fun tag apply( bs: Array[U8 val] val) : String val Parameters \u00b6 bs: Array [ U8 val] val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ToHexString val) : Bool val Parameters \u00b6 that: ToHexString val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ToHexString val) : Bool val Parameters \u00b6 that: ToHexString val Returns \u00b6 Bool val","title":"primitive ToHexString"},{"location":"crypto-ToHexString/#tohexstring","text":"[Source] primitive val ToHexString","title":"ToHexString"},{"location":"crypto-ToHexString/#constructors","text":"","title":"Constructors"},{"location":"crypto-ToHexString/#create","text":"[Source] new val create() : ToHexString val^","title":"create"},{"location":"crypto-ToHexString/#returns","text":"ToHexString val^","title":"Returns"},{"location":"crypto-ToHexString/#public-functions","text":"","title":"Public Functions"},{"location":"crypto-ToHexString/#apply","text":"[Source] Return the lower-case hexadecimal string representation of the given Array of U8. fun tag apply( bs: Array[U8 val] val) : String val","title":"apply"},{"location":"crypto-ToHexString/#parameters","text":"bs: Array [ U8 val] val","title":"Parameters"},{"location":"crypto-ToHexString/#returns_1","text":"String val","title":"Returns"},{"location":"crypto-ToHexString/#eq","text":"[Source] fun box eq( that: ToHexString val) : Bool val","title":"eq"},{"location":"crypto-ToHexString/#parameters_1","text":"that: ToHexString val","title":"Parameters"},{"location":"crypto-ToHexString/#returns_2","text":"Bool val","title":"Returns"},{"location":"crypto-ToHexString/#ne","text":"[Source] fun box ne( that: ToHexString val) : Bool val","title":"ne"},{"location":"crypto-ToHexString/#parameters_2","text":"that: ToHexString val","title":"Parameters"},{"location":"crypto-ToHexString/#returns_3","text":"Bool val","title":"Returns"},{"location":"src/crypto/constant_time_compare/","text":"primitive ConstantTimeCompare fun apply[S: ByteSeq box = ByteSeq box](xs: S, ys: S): Bool => \"\"\" Return true if the two ByteSeqs, xs and ys, have equal contents. The time taken is independent of the contents. \"\"\" if xs.size() != ys.size() then false else var v = U8(0) var i: USize = 0 while i < xs.size() do try v = v or (xs(i)? xor ys(i)?) else return false end i = i + 1 end v == 0 end","title":"Constant time compare"},{"location":"src/crypto/digest/","text":"use \"path:/usr/local/opt/libressl/lib\" if osx use \"lib:crypto\" use @EVP_MD_CTX_new[Pointer[_EVPCTX]]() if \"openssl_1.1.x\" use @EVP_MD_CTX_create[Pointer[_EVPCTX]]() if not \"openssl_1.1.x\" use @EVP_DigestInit_ex[I32](ctx: Pointer[_EVPCTX] tag, t: Pointer[_EVPMD], impl: USize) use @EVP_DigestUpdate[I32](ctx: Pointer[_EVPCTX] tag, d: Pointer[U8] tag, cnt: USize) use @EVP_DigestFinal_ex[I32](ctx: Pointer[_EVPCTX] tag, md: Pointer[U8] tag, s: Pointer[USize]) use @EVP_MD_CTX_free[None](ctx: Pointer[_EVPCTX]) if \"openssl_1.1.x\" use @EVP_MD_CTX_destroy[None](ctx: Pointer[_EVPCTX]) if not \"openssl_1.1.x\" use @EVP_md4[Pointer[_EVPMD]]() use @EVP_md5[Pointer[_EVPMD]]() use @EVP_ripemd160[Pointer[_EVPMD]]() use @EVP_sha1[Pointer[_EVPMD]]() use @EVP_sha224[Pointer[_EVPMD]]() use @EVP_sha256[Pointer[_EVPMD]]() use @EVP_sha384[Pointer[_EVPMD]]() use @EVP_sha512[Pointer[_EVPMD]]() use @EVP_shake128[Pointer[_EVPMD]]() use @EVP_shake256[Pointer[_EVPMD]]() primitive _EVPMD primitive _EVPCTX class Digest \"\"\" Produces a hash from the chunks of input. Feed the input with append() and produce a final hash from the concatenation of the input with final(). \"\"\" let _digest_size: USize let _ctx: Pointer[_EVPCTX] var _hash: (Array[U8] val | None) = None new md4() => \"\"\" Use the MD4 algorithm to calculate the hash. \"\"\" _digest_size = 16 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_md4(), USize(0)) new md5() => \"\"\" Use the MD5 algorithm to calculate the hash. \"\"\" _digest_size = 16 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_md5(), USize(0)) new ripemd160() => \"\"\" Use the RIPEMD160 algorithm to calculate the hash. \"\"\" _digest_size = 20 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_ripemd160(), USize(0)) new sha1() => \"\"\" Use the SHA1 algorithm to calculate the hash. \"\"\" _digest_size = 20 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_sha1(), USize(0)) new sha224() => \"\"\" Use the SHA256 algorithm to calculate the hash. \"\"\" _digest_size = 28 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_sha224(), USize(0)) new sha256() => \"\"\" Use the SHA256 algorithm to calculate the hash. \"\"\" _digest_size = 32 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_sha256(), USize(0)) new sha384() => \"\"\" Use the SHA384 algorithm to calculate the hash. \"\"\" _digest_size = 48 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_sha384(), USize(0)) new sha512() => \"\"\" Use the SHA512 algorithm to calculate the hash. \"\"\" _digest_size = 64 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() else _ctx = @EVP_MD_CTX_create() end @EVP_DigestInit_ex(_ctx, @EVP_sha512(), USize(0)) new shake128() => \"\"\" Use the Shake128 algorithm to calculate the hash. \"\"\" _digest_size = 16 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() @EVP_DigestInit_ex(_ctx, @EVP_shake128(), USize(0)) else compile_error \"openssl_0.9.x dose not support shake128\" end new shake256() => \"\"\" Use the Shake256 algorithm to calculate the hash. \"\"\" _digest_size = 32 ifdef \"openssl_1.1.x\" then _ctx = @EVP_MD_CTX_new() @EVP_DigestInit_ex(_ctx, @EVP_shake256(), USize(0)) else compile_error \"openssl_0.9.x dose not support shake256\" end fun ref append(input: ByteSeq) ? => \"\"\" Update the Digest object with input. Throw an error if final() has been called. \"\"\" if _hash isnt None then error end @EVP_DigestUpdate(_ctx, input.cpointer(), input.size()) fun ref final(): Array[U8] val => \"\"\" Return the digest of the strings passed to the append() method. \"\"\" match _hash | let h: Array[U8] val => h else let size = _digest_size let digest = recover String.from_cpointer( @pony_alloc(@pony_ctx(), size), size) end @EVP_DigestFinal_ex(_ctx, digest.cpointer(), Pointer[USize]) ifdef \"openssl_1.1.x\" then @EVP_MD_CTX_free(_ctx) else @EVP_MD_CTX_destroy[None](_ctx) end let h = (consume digest).array() _hash = h h end fun digest_size(): USize => \"\"\" Return the size of the message digest in bytes. \"\"\" _digest_size","title":"Digest"},{"location":"src/crypto/hash_fn/","text":"use \"path:/usr/local/opt/libressl/lib\" if osx use \"lib:crypto\" use @MD4[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @MD5[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @RIPEMD160[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @SHA1[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @SHA224[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @SHA256[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @SHA384[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use @SHA512[Pointer[U8]](d: Pointer[U8] tag, n: USize, md: Pointer[U8]) use \"format\" interface HashFn \"\"\" Produces a fixed-length byte array based on the input sequence. \"\"\" fun tag apply(input: ByteSeq): Array[U8] val primitive MD4 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the MD4 message digest conforming to RFC 1320 \"\"\" recover let size: USize = 16 let digest = @pony_alloc(@pony_ctx(), size) @MD4(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive MD5 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the MD5 message digest conforming to RFC 1321 \"\"\" recover let size: USize = 16 let digest = @pony_alloc(@pony_ctx(), size) @MD5(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive RIPEMD160 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the RIPEMD160 message digest conforming to ISO/IEC 10118-3 \"\"\" recover let size: USize = 20 let digest = @pony_alloc(@pony_ctx(), size) @RIPEMD160(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive SHA1 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the SHA1 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 \"\"\" recover let size: USize = 20 let digest = @pony_alloc(@pony_ctx(), size) @SHA1(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive SHA224 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the SHA224 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 \"\"\" recover let size: USize = 28 let digest = @pony_alloc(@pony_ctx(), size) @SHA224(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive SHA256 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the SHA256 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 \"\"\" recover let size: USize = 32 let digest = @pony_alloc(@pony_ctx(), size) @SHA256(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive SHA384 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the SHA384 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 \"\"\" recover let size: USize = 48 let digest = @pony_alloc(@pony_ctx(), size) @SHA384(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive SHA512 is HashFn fun tag apply(input: ByteSeq): Array[U8] val => \"\"\" Compute the SHA512 message digest conforming to US Federal Information Processing Standard FIPS PUB 180-4 \"\"\" recover let size: USize = 64 let digest = @pony_alloc(@pony_ctx(), size) @SHA512(input.cpointer(), input.size(), digest) Array[U8].from_cpointer(digest, size) end primitive ToHexString fun tag apply(bs: Array[U8] val): String => \"\"\" Return the lower-case hexadecimal string representation of the given Array of U8. \"\"\" let out = recover String(bs.size() * 2) end for c in bs.values() do out.append(Format.int[U8](c where fmt = FormatHexSmallBare, width = 2, fill = '0')) end consume out","title":"Hash fn"}]}